#!/bin/bash
LANG=

#set -ex

echo "`date +%s.%N` #Submit at `date`"

if [ $# -ne 8 ] ; then
    cat << EOF >&2
usage: $0 NodeShape blockShape timeLimit config-file volume job-set data-type data-stage [submit-option]
The numNodes is the number of nodes per instance. The numInstance optionally specifies the number of instances.
The nodeShape is the node shape. The mapFile is option.
The timeLimit is the maximum of execution time with the format hh:mm:ss.
The config-file is the yaml format config file.
The volume : "vol1" or "vol2" or "vol3"
The job-set : file name for inter-job synchronization. if 'None' is set, without synchronization
The data-type : "tar" as ziped-tfrecord, or "txz" as non-compressed-tfrecord with xz compression
The data-stage : "llio" staging to /local, or "ram" staging to /worktmp

example: $0 16x12x48 8x4x16 5:00:00 configs/cosmo_closed_512.yaml vol1 set1 txz ram
EOF
    exit 1
fi

#NumNodes="$1" && shift
NodeShape="$1" && shift
BlockShape="$1" && shift
TimeLimit="$1" && shift
ConfigYaml="$1" && shift
VolName="$1" && shift
JobSetName="$1" && shift
DataCmpType="$1" && shift
DataStage="$1" && shift

### Parameters
dnnlverbose=0

### The directory where data is stored
if [ "$DataCmpType" = "tar" ]; then
    DataDir0="cosmoUniverse_2019_05_4parE_tf_v2_8192_tar"
    DataComp="none"
else
    DataDir0="cosmoUniverse_2019_05_4parE_tf_v2_nocomp_8192_txz"
    DataComp="xz"
fi

if [ "$VolName" = "vol1" ]; then
    DataDir="/2ndfs/ra010011/data/MLPerf/${DataDir0}"
elif [ "$VolName" = "vol2" ]; then
    DataDir="/.vol0003/ra010011/data/MLPerf/${DataDir0}"
else
    DataDir="/.vol0005/ra010011/data/MLPerf/${DataDir0}"
fi
echo DataDir is $DataDir

### Copy flag and directory path 
#   copy data from remote storage to local disk
#   and use the training data in local disk
if [ "$DataStage" = "llio" ]; then
    LocalDataDir="/local/${USER}"
else
    LocalDataDir="/worktmp/${USER}"
fi

### The ready flag base directory
ReadyFlagBaseDir=/2ndfs/ra010011/cosmoflow/ready_flag

### Duplicated staging
TrainStagingDupFactor=1

### Config YAML File (now defined by params of Submit command)
#ConfigYaml="configs/cosmo.yaml"

### WORKER script
WORKER="ompi_bind.sh"

### Python environment
OPTFile="TF220-33_0921.tgz"
#ShareDir=/tmp/${USER}
#ShareDir=/local
ShareDir=/worktmp

NNodex=`echo "$NodeShape" | awk -F'x' '{print $1}'`
NNodey=`echo "$NodeShape" | awk -F'x' '{print $2}'`
NNodez=`echo "$NodeShape" | awk -F'x' '{print $3}'`
NBlkx=`echo "$BlockShape" | awk -F'x' '{print $1}'`
NBlky=`echo "$BlockShape" | awk -F'x' '{print $2}'`
NBlkz=`echo "$BlockShape" | awk -F'x' '{print $3}'`
NumNodes=$(( $NNodex * $NNodey * NNodez ))
InstNumNodes=$(( $NBlkx * $NBlky * NBlkz ))
NumInst=$(( $NumNodes / $NBlkx / $NBlky / $NBlkz ))

# Select Resource Group
if  [ $NumNodes -lt 385 ] ; then
    RSC_GRP=small
elif  [ $NumNodes -lt 55297 ] ; then
    RSC_GRP=large
else
    RSC_GRP=huge
fi
RSC_GRP=huge

### Create log directory
MyDir=`readlink -f "$0" | xargs dirname`
MyName=`basename "$0"`
Time=`date "+%y%m%d%H%M%S"`
HostName=`hostname | awk -F . '{ print $1; }'`
JobName="$MyName.$Time.$HostName."`printf "%06x" $$`
JobName2="$JobName.b"

BaseFile="$MyDir/BatchBase"

LogDir="$MyDir/log"/`printf "%04d" $InstNumNodes`"x"$NumInst/"$JobName"
mkdir -p "$LogDir" || exit

ReadyFlagDir=${ReadyFlagBaseDir}/`printf "%04d" $InstNumNodes`"x"$NumInst/"$JobName"
(umask 002; mkdir -p "$ReadyFlagDir") || exit
###

cp "$MyDir/$0" $LogDir
cp ${MyDir}/${WORKER} ${LogDir}

ParameterFile="$LogDir/parameters"
cp "$MyDir/parameters" "$ParameterFile"

cp $MyDir/$ConfigYaml ${LogDir}/ || exit

(cd multi_inst_cp; make)
cp $MyDir/multi_inst_cp/multi_inst_cp_main.sh ${LogDir}/ || exit
cp $MyDir/multi_inst_cp/multi_inst_cp ${LogDir}/ || exit
cp $MyDir/multi_inst_cp/untar.sh ${LogDir}/ || exit

git rev-parse HEAD 2>&1 > "$LogDir/git_hash"

MapFile=${LogDir}/map_${NodeShape}_${BlockShape}.txt
MapFile=$(readlink -f $MapFile)

if [ "$PJM_ENVIRONMENT" = "INTERACT" ]; then
    for i in `seq 0 $(($PJM_NODE-1))`; do echo "($i)"; done > $MapFile
    NumDataFile=128
else
    ./mapper2.sh $NNodex $NNodey $NNodez $NBlkx $NBlky $NBlkz > $MapFile
    test $? -eq 0 || exit 1
    NumDataFile=8192
fi
PJM_MAPFILE="#PJM --mpi rank-map-hostfile=$MapFile"

### Generate qsub script
ScriptFile0="$LogDir/script0"
ScriptFile="$LogDir/script"

cat << EOF > "$ScriptFile0"
#!/bin/bash
#PJM -L "rscunit=rscunit_ft01,rscgrp=${RSC_GRP}"
#PJM -L elapse=$TimeLimit
#PJM -L proc-core=48
#PJM -L "node=${NodeShape}:strict,freq=2200"
#PJM --mpi "max-proc-per-node=2"
#PJM -j
#PJM -S
${PJM_MAPFILE}

bash $ScriptFile

EOF

cat << EOF > "$ScriptFile"
#!/bin/bash

hostname
export COSMOFLOW_DIR="$MyDir"

export PLE_MPI_STD_EMPTYFILE=off

LogDir="$LogDir"
if [ ! -d "\$LogDir" ] ; then
    echo "\$LogDir: not a directory" >&2
    exit 1
fi

printenv > "$LogDir/environ"

### The directory where data is stored
DataDir="$DataDir"
DataComp="${DataComp}"

### The ready flag directory
ReadyFlagDir="$ReadyFlagDir"

dnnlverbose=$dnnlverbose
echo "DNNL Verbose Level: $dnnlverbose"

###
# Copy flag and directory path 
#   copy data from remote storage to local disk
#   and use the training data in local disk
LocalDataDir=${LocalDataDir}
TmpDataDir=${DataDir}
ShareDir=${ShareDir}
NumDataFile=${NumDataFile}
JobSetName=${JobSetName}

###
WORKER=${WORKER}
OPTFile=${OPTFile}

### The config yaml file
ConfigYaml=$(basename ${ConfigYaml})

### Duplicated staging
TrainStagingDupFactor=${TrainStagingDupFactor}

### Instance info
NumInst=${NumInst}
InstNumNodes=${InstNumNodes}

MapFile=${MapFile}

EOF

cat $BaseFile >> "$ScriptFile"

echo ---------------
echo Job information
echo ---------------
echo Mode: MPI
echo NumNodes: $NumNodes
echo NodeShape: $NodeShape
echo LogDir: $LogDir

if [[ `hostname` =~ fn01sv0[0-9] ]] ; then
    # To use LLIO (node-temporary)
    QsubArgs+=("--llio localtmp-size=80Gi")
#    QsubArgs+=("--llio sharedtmp-size=20Gi")

    QsubArgs+=("$ScriptFile0")
    ###

    ### Execute qsub command
    echo "`date +%s.%N` #qsub"
    echo "> pjsub ${QsubArgs[@]} $@"
    pjsub ${QsubArgs[@]} "$@"

    if [ "$JobSetName" = "None" ]; then
        echo This job is run without inter-job sync.
    else
        echo \#\#\#\#
        echo \#\#\#\# This job will not start to data-staging until /2ndfs/ra010011/cosmoflow/ready_flag/jobs/${JobSetName} is created.
        echo \#\#\#\#
    fi

else
    # On compute node
    bash $ScriptFile 2>&1 | tee ${LogDir}/stdout.txt
fi
# End of file

